// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace hmc_clutter_new_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
class hmc_clutter_new_model : public prob_grad {
private:
    int K;
    int N;
    int D;
    vector<row_vector_d> y;
    vector<double> weight;
    row_vector_d noise_mean;
    matrix_d Sigma_base;
    matrix_d Sigma_noise;
public:
    hmc_clutter_new_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "hmc_clutter_new_model_namespace::hmc_clutter_new_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y", "row_vector_d", context__.to_vec(N,D));
        validate_non_negative_index("y", "N", N);
        validate_non_negative_index("y", "D", D);
        y = std::vector<row_vector_d>(N,row_vector_d(D));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_i_vec_lim__ = D;
        for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
            size_t y_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "weight", "double", context__.to_vec(K));
        validate_non_negative_index("weight", "K", K);
        weight = std::vector<double>(K,double(0));
        vals_r__ = context__.vals_r("weight");
        pos__ = 0;
        size_t weight_limit_0__ = K;
        for (size_t i_0__ = 0; i_0__ < weight_limit_0__; ++i_0__) {
            weight[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "noise_mean", "row_vector_d", context__.to_vec(D));
        validate_non_negative_index("noise_mean", "D", D);
        noise_mean = row_vector_d(D);
        vals_r__ = context__.vals_r("noise_mean");
        pos__ = 0;
        size_t noise_mean_i_vec_lim__ = D;
        for (size_t i_vec__ = 0; i_vec__ < noise_mean_i_vec_lim__; ++i_vec__) {
            noise_mean[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "Sigma_base", "matrix_d", context__.to_vec(D,D));
        validate_non_negative_index("Sigma_base", "D", D);
        validate_non_negative_index("Sigma_base", "D", D);
        Sigma_base = matrix_d(D,D);
        vals_r__ = context__.vals_r("Sigma_base");
        pos__ = 0;
        size_t Sigma_base_k_mat_lim__ = D;
        for (size_t n_mat__ = 0; n_mat__ < Sigma_base_k_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < Sigma_base_k_mat_lim__; ++m_mat__) {
                Sigma_base(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "Sigma_noise", "matrix_d", context__.to_vec(D,D));
        validate_non_negative_index("Sigma_noise", "D", D);
        validate_non_negative_index("Sigma_noise", "D", D);
        Sigma_noise = matrix_d(D,D);
        vals_r__ = context__.vals_r("Sigma_noise");
        pos__ = 0;
        size_t Sigma_noise_k_mat_lim__ = D;
        for (size_t n_mat__ = 0; n_mat__ < Sigma_noise_k_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < Sigma_noise_k_mat_lim__; ++m_mat__) {
                Sigma_noise(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate data
        stan::math::check_cov_matrix(function__,"Sigma_base",Sigma_base);
        stan::math::check_cov_matrix(function__,"Sigma_noise",Sigma_noise);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += D;
    }

    ~hmc_clutter_new_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu", "row_vector_d", context__.to_vec(D));
        row_vector_d mu(D);
        for (int j1__ = 0U; j1__ < D; ++j1__)
            mu(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,1,Eigen::Dynamic>  mu;
        (void) mu;   // dummy to suppress unused var warning
        if (jacobian__)
            mu = in__.row_vector_constrain(D,lp__);
        else
            mu = in__.row_vector_constrain(D);


        // transformed parameters

        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            current_statement_begin__ = 18;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 19;
                lp_accum__.add(log_sum_exp((log(get_base1(weight,1,"weight",1)) + multi_normal_log(get_base1(y,n,"y",1),mu,Sigma_base)),(log(get_base1(weight,2,"weight",1)) + multi_normal_log(get_base1(y,n,"y",1),noise_mean,Sigma_noise))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "hmc_clutter_new_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        row_vector_d mu = in__.row_vector_constrain(D);
        for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "hmc_clutter_new_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef hmc_clutter_new_model_namespace::hmc_clutter_new_model stan_model;


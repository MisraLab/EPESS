// Code generated by Stan version 2.8

#include <stan/model/model_header.hpp>

namespace hmc_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
class hmc_model : public prob_grad {
private:
    int number_mixtures;
    int dimension;
    int dimension_sq;
    vector<double> mixture_weights;
    matrix_d mixture_means;
    vector<vector<double> > mix_cov;
public:
    hmc_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "hmc_model_namespace::hmc_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "number_mixtures", "int", context__.to_vec());
        number_mixtures = int(0);
        vals_i__ = context__.vals_i("number_mixtures");
        pos__ = 0;
        number_mixtures = vals_i__[pos__++];
        context__.validate_dims("data initialization", "dimension", "int", context__.to_vec());
        dimension = int(0);
        vals_i__ = context__.vals_i("dimension");
        pos__ = 0;
        dimension = vals_i__[pos__++];
        context__.validate_dims("data initialization", "dimension_sq", "int", context__.to_vec());
        dimension_sq = int(0);
        vals_i__ = context__.vals_i("dimension_sq");
        pos__ = 0;
        dimension_sq = vals_i__[pos__++];
        context__.validate_dims("data initialization", "mixture_weights", "double", context__.to_vec(number_mixtures));
        validate_non_negative_index("mixture_weights", "number_mixtures", number_mixtures);
        mixture_weights = std::vector<double>(number_mixtures,double(0));
        vals_r__ = context__.vals_r("mixture_weights");
        pos__ = 0;
        size_t mixture_weights_limit_0__ = number_mixtures;
        for (size_t i_0__ = 0; i_0__ < mixture_weights_limit_0__; ++i_0__) {
            mixture_weights[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "mixture_means", "matrix_d", context__.to_vec(number_mixtures,dimension));
        validate_non_negative_index("mixture_means", "number_mixtures", number_mixtures);
        validate_non_negative_index("mixture_means", "dimension", dimension);
        mixture_means = matrix_d(number_mixtures,dimension);
        vals_r__ = context__.vals_r("mixture_means");
        pos__ = 0;
        size_t mixture_means_m_mat_lim__ = number_mixtures;
        size_t mixture_means_n_mat_lim__ = dimension;
        for (size_t n_mat__ = 0; n_mat__ < mixture_means_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < mixture_means_m_mat_lim__; ++m_mat__) {
                mixture_means(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "mix_cov", "double", context__.to_vec(dimension_sq,number_mixtures));
        validate_non_negative_index("mix_cov", "dimension_sq", dimension_sq);
        validate_non_negative_index("mix_cov", "number_mixtures", number_mixtures);
        mix_cov = std::vector<std::vector<double> >(dimension_sq,std::vector<double>(number_mixtures,double(0)));
        vals_r__ = context__.vals_r("mix_cov");
        pos__ = 0;
        size_t mix_cov_limit_1__ = number_mixtures;
        for (size_t i_1__ = 0; i_1__ < mix_cov_limit_1__; ++i_1__) {
            size_t mix_cov_limit_0__ = dimension_sq;
            for (size_t i_0__ = 0; i_0__ < mix_cov_limit_0__; ++i_0__) {
                mix_cov[i_0__][i_1__] = vals_r__[pos__++];
            }
        }

        // validate data

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += dimension;
    }

    ~hmc_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("x")))
            throw std::runtime_error("variable x missing");
        vals_r__ = context__.vals_r("x");
        pos__ = 0U;
        context__.validate_dims("initialization", "x", "vector_d", context__.to_vec(dimension));
        vector_d x(dimension);
        for (int j1__ = 0U; j1__ < dimension; ++j1__)
            x(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(x);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  x;
        (void) x;   // dummy to suppress unused var warning
        if (jacobian__)
            x = in__.vector_constrain(dimension,lp__);
        else
            x = in__.vector_constrain(dimension);


        // transformed parameters

        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            {
                vector<T__> ps(number_mixtures);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sigma(dimension,dimension);
                (void) sigma;  // dummy to suppress unused var warning
                stan::math::fill(sigma,DUMMY_VAR__);
                stan::math::initialize(ps, DUMMY_VAR__);
                stan::math::initialize(sigma, DUMMY_VAR__);
                current_statement_begin__ = 20;
                for (int k = 1; k <= number_mixtures; ++k) {
                    current_statement_begin__ = 21;
                    for (int i = 1; i <= dimension; ++i) {
                        current_statement_begin__ = 22;
                        for (int j = 1; j <= dimension; ++j) {
                            current_statement_begin__ = 23;
                            stan::math::assign(get_base1_lhs(sigma,i,j,"sigma",1), get_base1(get_base1(mix_cov,(i + ((j - 1) * dimension)),"mix_cov",1),k,"mix_cov",2));
                        }
                    }
                    current_statement_begin__ = 27;
                    stan::math::assign(get_base1_lhs(ps,k,"ps",1), (log(get_base1(mixture_weights,k,"mixture_weights",1)) + multi_normal_log(x,get_base1(mixture_means,k,"mixture_means",1),sigma)));
                }
                current_statement_begin__ = 30;
                lp_accum__.add(log_sum_exp(ps));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(dimension);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "hmc_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d x = in__.vector_constrain(dimension);
        for (int k_0__ = 0; k_0__ < dimension; ++k_0__) {
            vars__.push_back(x[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "hmc_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= dimension; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= dimension; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef hmc_model_namespace::hmc_model stan_model;

